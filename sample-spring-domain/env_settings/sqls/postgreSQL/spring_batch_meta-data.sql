
/* Drop Tables */

DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_CONTEXT;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_CONTEXT;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_PARAMS;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION;
DROP TABLE IF EXISTS BATCH_JOB_INSTANCE;



/* Drop Sequences */

DROP SEQUENCE IF EXISTS BATCH_STEP_EXECUTION_SEQ;
DROP SEQUENCE IF EXISTS BATCH_JOB_SEQ;
DROP SEQUENCE IF EXISTS BATCH_JOB_EXECUTION_SEQ;




/* Create Sequences */

CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ;
CREATE SEQUENCE BATCH_JOB_SEQ;
CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ;



/* Create Tables */

CREATE TABLE BATCH_JOB_EXECUTION
(
	JOB_EXECUTION_ID bigint NOT NULL,
	VERSION bigint,
	JOB_INSTANCE_ID bigint NOT NULL,
	CREATE_TIME timestamp with time zone NOT NULL,
	START_TIME timestamp with time zone DEFAULT NULL,
	END_TIME timestamp with time zone DEFAULT NULL,
	STATUS varchar(10),
	EXIT_CODE varchar(100),
	EXIT_MESSAGE varchar(2500),
	LAST_UPDATED timestamp with time zone,
	PRIMARY KEY (JOB_EXECUTION_ID)
) WITHOUT OIDS;


CREATE TABLE BATCH_JOB_EXECUTION_PARAMS
(
	JOB_EXECUTION_ID bigint NOT NULL,
	TYPE_CD varchar(6) NOT NULL,
	KEY_NAME varchar(100) NOT NULL,
	STRING_VAL varchar(250),
	DATE_VAL timestamp with time zone DEFAULT NULL,
	LONG_VAL bigint,
	DOUBLE_VAL double precision,
	IDENTIFYING char(1) NOT NULL
) WITHOUT OIDS;


CREATE TABLE BATCH_STEP_EXECUTION
(
	STEP_EXECUTION_ID bigint NOT NULL,
	VERSION bigint NOT NULL,
	STEP_NAME varchar(100) NOT NULL,
	JOB_EXECUTION_ID bigint NOT NULL,
	START_TIME timestamp with time zone NOT NULL,
	END_TIME timestamp with time zone DEFAULT NULL,
	STATUS varchar(10),
	COMMIT_COUNT bigint,
	READ_COUNT bigint,
	FILTER_COUNT bigint,
	WRITE_COUNT bigint,
	READ_SKIP_COUNT bigint,
	WRITE_SKIP_COUNT bigint,
	PROCESS_SKIP_COUNT bigint,
	ROLLBACK_COUNT bigint,
	EXIT_CODE varchar(100),
	EXIT_MESSAGE varchar(2500),
	LAST_UPDATED timestamp with time zone,
	PRIMARY KEY (STEP_EXECUTION_ID)
) WITHOUT OIDS;


CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT
(
	STEP_EXECUTION_ID bigint NOT NULL,
	SHORT_CONTEXT varchar(2500) NOT NULL,
	SERIALIZED_CONTEXT text
) WITHOUT OIDS;


CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT
(
	JOB_EXECUTION_ID bigint NOT NULL,
	SHORT_CONTEXT varchar(2500),
	SERIALIZED_CONTEXT text
) WITHOUT OIDS;


CREATE TABLE BATCH_JOB_INSTANCE
(
	JOB_INSTANCE_ID bigint NOT NULL,
	VERSION bigint,
	JOB_NAME varchar(100) NOT NULL,
	JOB_KEY varchar(32) NOT NULL,
	PRIMARY KEY (JOB_INSTANCE_ID),
	UNIQUE (JOB_NAME, JOB_KEY)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE BATCH_STEP_EXECUTION
	ADD FOREIGN KEY (JOB_EXECUTION_ID)
	REFERENCES BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BATCH_JOB_EXECUTION_CONTEXT
	ADD FOREIGN KEY (JOB_EXECUTION_ID)
	REFERENCES BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BATCH_JOB_EXECUTION_PARAMS
	ADD FOREIGN KEY (JOB_EXECUTION_ID)
	REFERENCES BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BATCH_STEP_EXECUTION_CONTEXT
	ADD FOREIGN KEY (STEP_EXECUTION_ID)
	REFERENCES BATCH_STEP_EXECUTION (STEP_EXECUTION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BATCH_JOB_EXECUTION
	ADD FOREIGN KEY (JOB_INSTANCE_ID)
	REFERENCES BATCH_JOB_INSTANCE (JOB_INSTANCE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



