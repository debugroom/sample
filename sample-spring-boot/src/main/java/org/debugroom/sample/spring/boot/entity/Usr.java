package org.debugroom.sample.spring.boot.entity;
// Generated 2016/09/30 11:02:30 by Hibernate Tools 4.3.1.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Usr generated by hbm2java
 */
@Entity
@Table(name = "usr", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "login_id") )
public class Usr implements java.io.Serializable {

	private UsrId id;
	private Company company;
	private String userName;
	private String loginId;
	private String birthday;
	private int authorityLevel;
	private boolean isLogin;
	private Set<Credential> credentials = new HashSet<Credential>(0);
	private Set<Phone> phones = new HashSet<Phone>(0);
	private Set<Email> emails = new HashSet<Email>(0);
	private Set<Address> addresses = new HashSet<Address>(0);

	public Usr() {
	}

	public Usr(UsrId id, Company company, String loginId, int authorityLevel, boolean isLogin) {
		this.id = id;
		this.company = company;
		this.loginId = loginId;
		this.authorityLevel = authorityLevel;
		this.isLogin = isLogin;
	}

	public Usr(UsrId id, Company company, String userName, String loginId, String birthday, int authorityLevel,
			boolean isLogin, Set<Credential> credentials, Set<Phone> phones, Set<Email> emails,
			Set<Address> addresses) {
		this.id = id;
		this.company = company;
		this.userName = userName;
		this.loginId = loginId;
		this.birthday = birthday;
		this.authorityLevel = authorityLevel;
		this.isLogin = isLogin;
		this.credentials = credentials;
		this.phones = phones;
		this.emails = emails;
		this.addresses = addresses;
	}

	@EmbeddedId

	@AttributeOverrides({
			@AttributeOverride(name = "companyId", column = @Column(name = "company_id", nullable = false, length = 10) ),
			@AttributeOverride(name = "userId", column = @Column(name = "user_id", nullable = false, length = 8) ) })
	public UsrId getId() {
		return this.id;
	}

	public void setId(UsrId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id", nullable = false, insertable = false, updatable = false)
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@Column(name = "user_name")
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "login_id", unique = true, nullable = false, length = 32)
	public String getLoginId() {
		return this.loginId;
	}

	public void setLoginId(String loginId) {
		this.loginId = loginId;
	}

	@Column(name = "birthday", length = 8)
	public String getBirthday() {
		return this.birthday;
	}

	public void setBirthday(String birthday) {
		this.birthday = birthday;
	}

	@Column(name = "authority_level", nullable = false)
	public int getAuthorityLevel() {
		return this.authorityLevel;
	}

	public void setAuthorityLevel(int authorityLevel) {
		this.authorityLevel = authorityLevel;
	}

	@Column(name = "is_login", nullable = false)
	public boolean isIsLogin() {
		return this.isLogin;
	}

	public void setIsLogin(boolean isLogin) {
		this.isLogin = isLogin;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usr")
	public Set<Credential> getCredentials() {
		return this.credentials;
	}

	public void setCredentials(Set<Credential> credentials) {
		this.credentials = credentials;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usr")
	public Set<Phone> getPhones() {
		return this.phones;
	}

	public void setPhones(Set<Phone> phones) {
		this.phones = phones;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usr")
	public Set<Email> getEmails() {
		return this.emails;
	}

	public void setEmails(Set<Email> emails) {
		this.emails = emails;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usr")
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

}
